<%
	/**
	 * Created by The eXo Platform SARL
	 * Author : trongtt
	 *          trongtt@gmail.com
	 * July 25, 2006
	 * 8:16:23 AM
	 **/
%>
<%
  import java.util.Collection;
  import javax.jcr.Value;
  import javax.jcr.nodetype.PropertyDefinition;
  Collection collect = uicomponent.getNodeTypes();
  public void repairName(boolean bln) {
    println """
      <div>$bln</div>
    """;
  }

  public void repairName(String name) {
    String str = name.replace(":", "_");
    println """
	    <div title="$name">$name</div>
    """;
  }
 %>
 <%
  def rcontext = _ctx.getRequestContext() ;
  rcontext.getJavascriptManager().require("SHARED/ecm-utils", "ecmUtils").
  addScripts('ecmUtils.ECMUtils.onLoadNodeTypeInfo();');

%>


<div class="uiNodeTypeInfo" id="UINodeTypeInfoPopup">
	<div class="uiTabNormal">
		<ul class="nav nav-tabs">
						<%
						String style="active";
						int count = 0;
						for(nodeType in collect) {
							if (count++ == collect.size()-1) 
								style += " last";
						%>
							<li class="$style" onClick="eXo.ecm.UIJCRExplorer.displayTabContent(this)">
								<a data-toggle="tab">$nodeType.name</a>
							</li>
						<%
							style = "" ;
						}
						%>
						<li class="dropdown pull-right listHiddenTabsContainer" style="display: block;">
							 <a data-toggle="dropdown" class="dropdown-toggle">More <i class="uiIconMiniArrowDown uiIconLightGray"></i></a>
							 <ul class="dropdown-menu">
							 </ul>
						</li>
		</ul>

		<div class="tab-content" id="myTabContent">
			<%
			style="display: block;" ;
				for(nodeType in collect) {%>
					<div class="UITabContent resizable" nodeTypeName="<%=nodeType.name.replace("-","").replace(":","")%>" style="$style">
						<table class="uiGrid table table-hover table-striped" cellspacing="0" borderspacing="0">
							<thead>
								<tr>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.name")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.item")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.super-types")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.mixin")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.orderable-children")%></th>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td><%repairName(nodeType.getName());%></td>
									<td>
											<%
											if(nodeType.getPrimaryItemName() != null) println nodeType.getPrimaryItemName();
											else println "N/A";
											%>
									</td>
									<td>
									<%
										for(parent in nodeType.getSupertypes()) {
													println "<div>" ;
													repairName(parent.getName()) ;
													println "</div>" ;
												}
											%>
									</td>
									<td><%repairName(nodeType.isMixin())%></td>
									<td><%repairName(nodeType.hasOrderableChildNodes())%></td>
								</tr>
							</tbody>
						</table>
						<div class="gridTitleBar">
							<h6><%=_ctx.appRes("UINodeTypeInfo.label.property-def")%></h6>
						</div>
						<table class="uiGrid table table-hover table-striped" cellspacing="0" borderspacing="0">
							<col><col><col width="50"><col width="50"><col width="50"><col width="50"><col><col>
							<thead>
								<tr>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.prop-name")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.prop-type")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.prop-mandatory")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.prop-protected")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.prop-auto-create")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.prop-multiple")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.prop-default-values")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.prop-constraints")%></th>
								</tr>
							</thead>
							<tbody>
								<%
								def propertyDefinitions = nodeType.getPropertyDefinitions();
								if (propertyDefinitions.length == 0) { %>
								<tr>
									<td class="empty center" colspan=8">
										<%=_ctx.appRes("UIGrid.msg.empty")%>
									</td>
								</tr> 
								<%
								} else {
									for(bean in propertyDefinitions) {%>
									<tr>
										<td><%repairName(bean.getName())%></td>
										<td><%=uicomponent.resolveType(bean.getRequiredType())%></td>
										<td><%repairName(bean.isMandatory())%></td>
										<td><%repairName(bean.isProtected())%></td>
										<td><%repairName(bean.isAutoCreated())%></td>
										<td><%repairName(bean.isMultiple())%></td>
										<td><%=uicomponent.getDefaultValue(bean)%></td>
										<%
											StringBuilder contraints = new StringBuilder() ;
											String[] contraintValues = bean.getValueConstraints() ;
											if(contraintValues != null && contraintValues.length > 0) {
												for(value in contraintValues) {
													if(value != null) {
														if(contraints.length() > 0) contraints.append(",") ;
														contraints.append(value) ;
													}
												}
											}
										%>
										<td><%=contraints.toString()%></td>
									</tr>
									<%}
									}
								%>
							</tbody>
						</table>
						<div class="gridTitleBar">
							<h6><%=_ctx.appRes("UINodeTypeInfo.label.node-def")%></h6>
						</div>
						<table class="uiGrid table table-hover table-striped" cellspacing="0" borderspacing="0">
							<col><col><col width="60"><col width="60"><col width="60"><col>
							<thead>
								<tr>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.node-def-name")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.node-def-opv")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.node-def-man")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.node-def-pr")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.node-def-ac")%></th>
									<th><%=_ctx.appRes("UINodeTypeInfo.label.node-def-dnt")%></th>
								</tr>
							</thead>
							<tbody>
								<%
								def childNodeDefinitions = nodeType.getChildNodeDefinitions();
								if (childNodeDefinitions.length == 0) {
								%>
									<tr>
										<td class="empty center" colspan=6">
											<%=_ctx.appRes("UIGrid.msg.empty")%>
										</td>
									</tr> 
								<%
								} else {
									for(bean in childNodeDefinitions) {%>
									<tr>
										<td><%repairName(bean.getName())%></td>
										<td><%=uicomponent.resolveOnParentVersion(bean.getOnParentVersion())%></td>
										<td><%repairName(bean.isMandatory())%></td>
										<td><%repairName(bean.isProtected())%></td>
										<td><%repairName(bean.isAutoCreated())%></td>
										<td><%repairName(bean.getDeclaringNodeType().getName())%></td>
									</tr>
									<%}
									}
								%>
							</tbody>
						</table>
					</div>
			<%
				style = "display: none";
			}%>
		</div>
	</div>
  <div class="uiAction">
		<%for(action in uicomponent.getActions()) {
		String actionLabel = _ctx.appRes(uicomponent.getName() + ".action." + action)
		String link = uicomponent.event(action) ;
		%>
		<button  onclick="$link" class="btn" href="javascript:void(0);">$actionLabel</button>
		<%}%>
	</div>
</div>
