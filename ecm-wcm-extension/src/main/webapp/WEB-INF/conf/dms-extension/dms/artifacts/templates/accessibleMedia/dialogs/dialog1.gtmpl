<%

  import org.exoplatform.services.wcm.core.NodetypeConstant;
  import org.exoplatform.web.application.Parameter;
   
  private void setUploadFields(name, nodeType, mixinType, fieldName, mimeTypes) {
    String changeInJcrPathParam = "";
    String sName = name;
    if (!("".equals(name))) {
      String[] hiddenField1 = ["jcrPath=/node/\$" + name, "nodetype=" + nodeType, "mixintype=" + mixinType, 
                               "changeInJcrPathParam=\$"+name, "defaultValues=\$"+name];
      uicomponent.addHiddenField(name + "HiddenField1", hiddenField1);
      changeInJcrPathParam = "changeInJcrPathParam=\$" + name;
      name = "\$" + name + "/";
    }
    String[] hiddenField2 = ["jcrPath=/node/" + name + "jcr:content", "nodetype=nt:resource", "mixintype=dc:elementSet", "visible=false", changeInJcrPathParam]; 
    String[] hiddenField3 = ["jcrPath=/node/" + name + "jcr:content/jcr:encoding", "visible=false", "UTF-8", changeInJcrPathParam];  
    String[] hiddenField4 = ["jcrPath=/node/" + name + "jcr:content/jcr:lastModified", "visible=false", changeInJcrPathParam];
    String[] hiddenField5 = ["jcrPath=/node/" + name + "jcr:content/dc:date", "visible=false", changeInJcrPathParam];                  
    uicomponent.addHiddenField(sName + "HiddenField2", hiddenField2);
    uicomponent.addHiddenField(sName + "HiddenField3", hiddenField3);
    uicomponent.addCalendarField(sName + "HiddenField4", hiddenField4);
    uicomponent.addCalendarField(sName + "HiddenField5", hiddenField5);
    
    String[] field = ["jcrPath=/node/"+ name + "jcr:content/jcr:data", changeInJcrPathParam];
    if (mimeTypes != null) {
      field = ["jcrPath=/node/"+ name + "jcr:content/jcr:data", changeInJcrPathParam, "mimetype=" + mimeTypes];
    }
    uicomponent.addUploadField(fieldName, field);  
  }
  
  def node = uicomponent.getNode();
  Parameter[] params;
  def objectID;
%>
<div class="uiForm">  
  <% uiform.begin() %>
  <%/* start render action*/%>
  <% if (uiform.isShowActionsOnTop()) {
            uiform.processRenderAction()
         }
  %>
  <%/* end render action*/%>

    <div class="form-horizontal">
        <div class="control-group">
          <label class="control-label" for="name"><%=_ctx.appRes("File.dialog.label.name")%>:</label>
          <div class="controls">
            <%
              String[] fieldName = ["jcrPath=/node", "mixintype=mix:votable,mix:commentable,mix:i18n,dc:elementSet", "editable=if-null", "validate=empty,name"] ;
              uicomponent.addTextField("name", fieldName) ; 
            %>
          </div>
        </div>
        <%if(!uicomponent.getId().equals("UILanguageDialogForm")){%>
          <div class="control-group">
            <label class="control-label" for="categories"><%=_ctx.appRes("File.dialog.label.categories")%>:</label>
            <div class="controls">
              <% 
                String[] fieldCategories = ["jcrPath=/node/exo:category", "multiValues=true", "reference=true", "editable=false"];
                uicomponent.addTextField("categories", fieldCategories);
              %>
            </div>
          </div>
        <%}%>
				<div class="control-group">
					<label class="control-label" for="content-lang"><%=_ctx.appRes("ElementSet.dialog.label.language")%></label>
					<div class="controls">
						<%
							String lang = org.exoplatform.portal.webui.util.Util.getPortalRequestContext().getLocale().toString();
							String[] fieldLang = ["jcrPath=/node/exo:language", "script=ecm-explorer/widget/FillSelectBoxWithLanguage.groovy", lang] ;
							uicomponent.addSelectBoxField("content-lang", fieldLang) ;
						%>
					</div>
				</div>
        <div class="control-group">
          <label class="control-label" for="content"><%=_ctx.appRes("File.dialog.label.content")%>:</label>
          <div class="controls">
          <%          
            def content = "content";
            if(node != null && (uicomponent.findComponentById(content) == null)) {
              def resourceNode = node.getNode("jcr:content");
              if(resourceNode.getProperty("jcr:data").getStream().available() > 0 && !uicomponent.isDataRemoved("/jcr:content")) {
                def nodeName = node.getName();
                def actionLink = uicomponent.event("RemoveData", "/jcr:content");
                %>    
                  <div>
                    <span><%=nodeName%></span>
                    <a class="actionIcon" onclick="$actionLink">
											<i class="uiIconTrash"></i>
										</a>
                  </div>
                <%
              } else {
                setUploadFields("", "nt:file", "", content, "video/x-flv,audio/mp3");
              }
            } else {
              setUploadFields("", "nt:file", "", content, "video/x-flv,audio/mp3");
            }
          %>
          </div>
        </div>       
          <div class="control-group">
            <label class="control-label" for="title"><%=_ctx.appRes("ElementSet.dialog.label.title")%></label>
            <div class="controls">
              <%
                String[] fieldTitle = ["jcrPath=/node/jcr:content/dc:title", "multiValues=true"] ;
                uicomponent.addTextField("title", fieldTitle) ;
              %>
            </div>
          </div>
          <div class="control-group">
            <label class="control-label" for="description"><%=_ctx.appRes("ElementSet.dialog.label.description")%></label>
            <div class="controls">
              <%
                String[] fieldDescription = ["jcrPath=/node/jcr:content/dc:description", "multiValues=true"] ;
                uicomponent.addTextField("description", fieldDescription) ; ;
              %>
            </div>
          </div>
          <div class="control-group">
            <label class="control-label" for="creator"><%=_ctx.appRes("ElementSet.dialog.label.creator")%></label>
            <div class="controls">
              <%
                String[] fieldCreator = ["jcrPath=/node/jcr:content/dc:creator", "multiValues=true"] ;
                uicomponent.addTextField("creator", fieldCreator) ;
              %>
            </div>
          </div>
          <div class="control-group">
            <label class="control-label" for="source"><%=_ctx.appRes("ElementSet.dialog.label.source")%></label>
            <div class="controls">
              <%
                String[] fieldSource = ["jcrPath=/node/jcr:content/dc:source", "multiValues=true"] ;
                uicomponent.addTextField("source", fieldSource) ;
              %>
            </div>
          </div>
          
          <!-- Captions -->
          <div class="control-group">
          <label class="control-label"><%=_ctx.appRes("AccessibleMedia.dialog.label.captions")%>:</label>
          <div class="controls">
            <%          
              String captions = "captions";
              def captionsNode = uicomponent.getNodeByType(NodetypeConstant.EXO_CAPTIONS);
              if(captionsNode != null && (uicomponent.findComponentById(captions) == null)) {
                def captionsResourceNode = captionsNode.getNode("jcr:content");
                def captionsName = captionsNode.getName();
                objectID  = "/" + captionsName + "/jcr:content";
                if(captionsResourceNode.getProperty("jcr:data").getStream().available() > 0 && !uicomponent.isDataRemoved(objectID)) {
                  objectID = objectID + "\$" + captionsName;
                  //params = [new Parameter("removeNode", captionsName)];
                  def captionsActionLink = uicomponent.event("RemoveData", objectID);
                  %>    
                    <div class="uiUploadInput">
                      <span><%=captionsName%></span>
                      <a class="actionIcon" onclick="$captionsActionLink">
                        <i class="uiIconTrash"></i>
                      </a>
                    </div>
                  <%
                } else {
                  setUploadFields(captions, "nt:file", "exo:captions", captions, null);
                }
              } else {
                setUploadFields(captions, "nt:file", "exo:captions", captions, null);
              }
            %>
            <div style="display:inline-block;" onmouseover="(function(elm) {eXo.ecm.WCMUtils.showPopover(elm);})(this)"
                onmouseout="(function(elm) {eXo.ecm.WCMUtils.hidePopover(elm);})(this)" data-toggle="popover" data-placement="left" data-content="<%= _ctx.appRes("AccessibleMedia.help.CaptionsHelp") %>">
              <i class="uiIconQuestion uiIconLightGray"> </i>              
            </div>
          </div>
          
        </div>
        <!-- End of Captions -->

        <!-- Audio description -->
        <div class="control-group">
        <label class="control-label"><%=_ctx.appRes("AccessibleMedia.dialog.label.audioDescription")%>:</label>
        <div class="controls">
          <%          
            String audioDescription = "audioDescription";
            def audioDescriptionNode = uicomponent.getNodeByType(NodetypeConstant.EXO_AUDIO_DESCRIPTION);
            if(audioDescriptionNode != null && (uicomponent.findComponentById(audioDescription) == null)) {
              def audioResourceNode = audioDescriptionNode.getNode("jcr:content");
              def audioDescriptionName = audioDescriptionNode.getName();
              objectID  = "/" + audioDescriptionName + "/jcr:content";
              if(audioResourceNode.getProperty("jcr:data").getStream().available() > 0 && !uicomponent.isDataRemoved(objectID)) {
                objectID = objectID + "\$" + audioDescriptionName;
                //params = [new Parameter("removeNode", audioDescriptionName)];
                def audioActionLink = uicomponent.event("RemoveData", objectID);
                %>    
                  <div class="uiUploadInput">
                    <span><%=audioDescriptionName%></span>
                    <a class="actionIcon" onclick="$audioActionLink">
                      <i class="uiIconTrash"></i>
                    </a>
                  </div>
                <%
              } else {
                setUploadFields(audioDescription, "nt:file", "exo:audioDescription", audioDescription, "video/x-flv,audio/mp3");
              }
            } else {
              setUploadFields(audioDescription, "nt:file", "exo:audioDescription", audioDescription, "video/x-flv,audio/mp3");
            }
          %>
          <div style="display:inline-block;" onmouseover="(function(elm) {eXo.ecm.WCMUtils.showPopover(elm);})(this)"
              onmouseout="(function(elm) {eXo.ecm.WCMUtils.hidePopover(elm);})(this)" data-toggle="popover" data-placement="left" data-content="<%= _ctx.appRes("AccessibleMedia.help.AudioDescriptionHelp") %>">
					  <i class="uiIconQuestion uiIconLightGray"></i>					  
          </div>
        </div>
        
      </div>
      <!-- End of Audio description -->
      
      <!-- Alternative text-->
      <div class="control-group">
        <label class="control-label" for="alternativeText"><%=_ctx.appRes("AccessibleMedia.dialog.label.alternativeText")%>:</label>
        <div class="controls">
          <% String[] fieldAltText = ["jcrPath=/node/exo:alternativeText", "fillJcrDataOfFile=false"] ;
             uicomponent.addRichtextField("alternativeText", fieldAltText) ;            
          %>
          <div style="display:inline-block;" onmouseover="(function(elm) {eXo.ecm.WCMUtils.showPopover(elm);})(this)"
              onmouseout="(function(elm) {eXo.ecm.WCMUtils.hidePopover(elm);})(this)" data-toggle="popover" data-placement="left" data-content="<%= _ctx.appRes("AccessibleMedia.help.AlternativeTextHelp") %>">
					  <i class="uiIconQuestion uiIconLightGray" id="AlternativeTextHelp"></i>					  
          </div>
        </div>

      </div>
      <!-- End of Alternative text -->
    </div>       
  <% if (!uiform.isShowActionsOnTop()) {
            uiform.processRenderAction()
         }
  %>
  <%uiform.end()%>
</div>
